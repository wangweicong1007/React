{"version":3,"sources":["showTime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","console","log","this","refs","focus","ref","onKeyDown","type","onChange","inp","onClick","Todoing","todo","map","item","idx","key","del","protoTypes","PropTypes","array","func","defaultProps","Todolist","addItem","data","delItem","splice","obj","o","Object","assign","keys","forEach","ReactDOM","render","document","getElementById"],"mappings":"iPAKuBA,Y,2BCDFC,E,YACjB,aAAc,IAAD,8BACT,+CAWJC,YAAc,SAACC,GAEM,KAAdA,EAAEC,SAER,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAhBZ,EAoBbC,aAAa,SAACN,GACV,EAAKO,SAAL,eAGIP,EAAEI,OAAOI,KAAMC,SAA2B,KAAlBT,EAAEI,OAAOC,MAAY,EAAEL,EAAEI,OAAOC,UAtB5D,EAAKN,YAAY,EAAKA,YAAYW,KAAjB,gBAEjB,EAAKC,MAAM,CAEPC,EAAE,GACFC,EAAE,GACFC,EAAE,IARG,E,iFA6BTC,QAAQC,IAAIC,KAAKC,KAAKN,GACtBK,KAAKC,KAAKN,EAAEO,U,+BAEN,IAAD,OACL,OACI,6BAII,2BAAOC,IAAI,IAAIC,UAAWJ,KAAKlB,YAAauB,KAAK,SAJrD,IAOI,2BAAOd,KAAK,IAAIe,SAAUN,KAAKX,aAAcD,MAAOY,KAAKN,MAAME,EAAGS,KAAK,OAAOD,UAAWJ,KAAKlB,cAPlG,IASI,2BAAOS,KAAK,IAAIe,SAAUN,KAAKX,aAAcD,MAAOY,KAAKN,MAAMG,EAAGQ,KAAK,OAAOD,UAAWJ,KAAKlB,cATlG,IAWI,2BAAIkB,KAAKN,MAAMC,EAAEK,KAAKN,MAAME,EAAEI,KAAKN,MAAMG,GAIzC,2BAAOM,IAAK,SAACI,GAAO,EAAKA,IAAIA,GAAMF,KAAK,SACxC,4BAAQG,QAAS,kBAAIV,QAAQC,IAAI,EAAKQ,IAAInB,SAA1C,qB,GAnDuBR,a,gBCClB6B,E,iLACP,IAAD,OACAC,EAAMV,KAAKf,MAAXyB,KACL,OACI,6BACI,4BAEQA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OACT,wBAAIC,IAAKD,GAAMD,EAAf,MAAuB,4BAAQJ,QAAS,SAACzB,GAAD,OAAK,EAAKE,MAAM8B,IAAIF,EAAI9B,KAAzC,0B,GARVH,aAgBrC6B,EAAQO,WAAW,CACfN,KAAKO,IAAUC,MACfH,IAAIE,IAAUE,MAElBV,EAAQW,aAAa,CACjBV,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,I,ICrBGW,E,YACjB,aAAc,IAAD,uBACT,+CAwBJC,QAAU,SAACC,GAIP,EAAKjC,SAAS,CACVoB,KAAK,GAAD,mBAAK,EAAKhB,MAAMgB,MAAhB,CAAqBa,OA9BpB,EAiCbC,QAAU,SAACX,EAAI9B,GAEXe,QAAQC,IAAIhB,GACZ,IAAI2B,EAAI,YAAM,EAAKhB,MAAMgB,MACzBA,EAAKe,OAAOZ,EAAI,GAEhB,EAAKvB,SAAS,CACVoB,SACF,WACEZ,QAAQC,IAAI,EAAKL,MAAMgB,SAE3B,EAAKpB,UAAS,SAACI,EAAMT,GAEjB,OADAa,QAAQC,IAAIL,EAAMgB,MACX,CACHA,YA7CR,EAAKhB,MAAM,CACPgB,KAAK,CAAC,EAAE,EAAE,IAGd,IAAIgB,EAAI,CAAC/B,EAAE,IAAIC,EAAE,CAAC,EAAE,EAAE,IAGlB+B,EAAEC,OAAOC,OAAO,GAAGH,EAFd,CAAC7B,EAAE,MAPH,OAeTC,QAAQC,IAAI4B,GACZ7B,QAAQC,IAAI2B,GACZ5B,QAAQC,IAAI4B,IAAMD,GAElBE,OAAOE,KAAKJ,GAAKK,SAAQ,SAACnB,GACtBd,QAAQC,IAAIa,GACZd,QAAQC,IAAI2B,EAAId,OArBX,E,sEAsDT,OACI,6BACI,kBAAC,EAAD,CAAW1B,IAAKc,KAAKsB,UACrB,kBAAC,EAAD,CAASP,IAAKf,KAAKwB,QAASd,KAAMV,KAAKN,MAAMgB,Y,GA1DvB9B,aCwBtCoD,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SAwI5CD,SAASC,eAAe,U","file":"static/js/main.c3527d2e.chunk.js","sourcesContent":["\r\nimport React,{Fragment,Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n//用类定义的一个组件\r\nclass ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            time:new Date().toLocaleString(),\r\n            a:100,\r\n            b:200\r\n        }\r\n        console.log(props)\r\n        setInterval(()=>{\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        // console.log(\"didupdate\");\r\n\r\n        // console.log(preState);\r\n        // console.log(this.state.time);\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        // console.log(\"getSnapshot\");\r\n        return {name:this.state.a};\r\n    }\r\n    componentDidMount(){\r\n        // console.log(\"didmount\");\r\n    }\r\n  \r\n    render(){\r\n        var {name,age} = this.props;\r\n        return(\r\n            <Fragment>\r\n                {/* 条件渲染 */}\r\n                {name.length>5?<div>姓名：{name}</div>:\"\"}\r\n                {name.length>5&&<div>姓名：{name}</div>}\r\n\r\n                \r\n\r\n                <div>{this.state.time}</div>\r\n\r\n               \r\n                {/* <div>年龄：{this.props.age}</div> */}\r\n                {/* 循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item,index)=>{\r\n                            if(index%2 === 0){\r\n                                return <p key={item}>{item}</p>\r\n                            }\r\n                            \r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n//默认导出：只能导出一次，被引入时可以重命名\r\nexport default ShowTime;\r\n\r\n//命名导出,可以导出多个(函数，变量。。都行)，被引入时与导出名一致\r\n// export {ShowTime};\r\n// export  const num = 100;\r\n// export const num1 = 200;\r\n","import React, { Component } from 'react'\r\n\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值（表单验证）/写法相对麻烦\r\nexport default class Todoinput extends Component {\r\n    constructor(){//绑定事件处理函数的this 把当前this绑到handleInput上去\r\n        super();\r\n        this.handleInput=this.handleInput.bind(this);\r\n         // 声明一个状态，把他的值被状态控制\r\n        this.state={\r\n            // inputValue:\"\"\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n        \r\n    }\r\n    handleInput = (e)=>{//e事件对象 可改成箭头函数 \r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){//键值 回车13\r\n     //console.log(e.target.value);//代表当前的结点\r\n     this.props.add(e.target.value);//属性是一个函数\r\n\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            // inputValue:e.target.value,//当前的值\r\n            // [e.target.name]:e.target.value //[变量] 字符串类型\r\n           [e.target.name]:parseInt(e.target.value ===\"\"?0:e.target.value)\r\n\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this.refs.a);\r\n        this.refs.a.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                 {/* value=\"abc\" input框的默认值 写上value值后被react控制 无法再更改 受控组件 */}\r\n                {/* this.state.inputValue三个框用的同一个状态值赋  this.state.a this.state.b this.state.c 每个框都有一个name属性*/}\r\n                {/* <input  onChange={this.handleChange} value={this.state.inputValue} onKeyDown={this.handleInput} type=\"text\"/> */}\r\n                <input ref='a' onKeyDown={this.handleInput} type=\"text\"/>\r\n                {/* <input name=\"a\" onChange={this.handleChange} value={this.state.a} type=\"text\" onKeyDown={this.handleInput}></input> */}\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} type=\"text\" onKeyDown={this.handleInput}></input>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} type=\"text\" onKeyDown={this.handleInput}></input>\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                 {/* button 拿到 input标签的值 用原生方法 this.state.inputValue */}\r\n                {/* <button onclick={()=>{console.log()}}>提交</button> */}\r\n                {/* 非受控组件:一次性获取或处理表单元素的值 */}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>\r\n                <button onClick={()=>console.log(this.inp.value)}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//受控组件：\r\n//1.给input标签添加value属性，赋值为state的值\r\n//2.给input标签绑定onChange事件，\r\n//在事件处理函数中setState\r\n//3.一个事件处理函数控制多个表单元素时给input标签加上属性，事件处理函数中写：\r\n//setState({[e.target.name]:e.target.value})\r\n\r\n\r\n","//快捷键RCC\r\nimport React, { Component } from 'react'\r\nimport Todolist from './Todolist'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        var {todo}=this.props;\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {\r\n                        todo.map((item,idx)=>\r\n                        <li key={idx}>{item}---<button onClick={(e)=>this.props.del(idx,e)}>删除</button>\r\n                        </li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nTodoing.protoTypes={\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\nTodoing.defaultProps={\r\n    todo:[1,2,3,4,4]\r\n}\r\n","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[1,2,3]\r\n        }\r\n        //深拷贝\\浅拷贝\r\n        var obj={a:100,b:[1,2,3]};\r\n        var obj1={c:300};\r\n                   //assign(目标对象，源对象)将目标对象复制给源对象\r\n        var o=Object.assign({},obj,obj1);//复制的对象进行审核\r\n        // var l=JSON.parse(JSON.stringify(obj));深拷贝\r\n        // var o=obj;//200\r\n        // var o ={...obj};//100\r\n        // o.a=200;\r\n        // o.b[0]=200;\r\n        console.log(o);\r\n        console.log(obj);\r\n        console.log(o === obj);//\r\n        // console.log(Object.keys(obj));\r\n        Object.keys(obj).forEach((item)=>{\r\n            console.log(item);\r\n            console.log(obj[item]);\r\n        })\r\n\r\n    }\r\n    addItem = (data)=>{\r\n        // this.state.todo.push(data);\r\n        // console.log(this.state.todo);\r\n\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (idx,e)=>{\r\n        //1.不能直接处理或改变state，通过setState改变\r\n        console.log(e);\r\n        let todo =[...this.state.todo];\r\n        todo.splice(idx,1);\r\n        //2.setState是异步执行\r\n        this.setState({\r\n            todo\r\n        },()=>{//异步的，在第一个执行成功后，才执行这个\r\n            console.log(this.state.todo);\r\n        })\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo)\r\n            return {\r\n                todo\r\n            }\r\n        })\r\n        // 在setState里获取state可能会出错，不是你想要的值\r\n       // 可以像上面那样，把第一个参数写成函数，解决该问题\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem} />\r\n                <Todoing del={this.delItem} todo={this.state.todo} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","\nimport React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport ShowTime from './showTime';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n\n/*\n// 函数声明组件\nfunction ShowTime(props){\n    console.log(props);\n            //返回内容多，用（）  \n    return (<Fragment>   \n             <div>{props.name}</div>\n             <div>\n                 {new Date().toLocaleString()}\n              </div>\n         </Fragment>  \n    )\n           // 引用到变量的地方，都要用{}\n            //  <div>{props.name}{new Date().toLocaleString()}</div>\n}\n*/\n\n\n//组件交互\n//父组件 ----->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n//子组件 ----->父组件:\n\nReactDOM.render(<Todolist/>,document.getElementById('root'));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//用类定义的一个组件\n//这里的代码剪切到showTime.js文件里了\n/*\nvar num=[1,2,3,4,5];\n           //调用组件，用<>\nReactDOM.render(<ShowTime age={num} name=\"zhangsan\" />,document.getElementById('root'))\n\n*/\n\n/*\n//显示当前系统时间\nfunction showTime(){\n    var ele=<div>\n                <p>当前时间是：</p>\n                <div>{new Date().toLocaleString()}</div>\n        </div>;\n    ReactDOM.render( \n        ele,\n        document.querySelector(\"#root\")\n        );\n}\n\nshowTime();\nsetInterval(showTime,1000);\n\n*/\n\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n// 自己封装render函数\n/*\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: [\n            'hello',\n            'react',\n            {\n                type: 'h1',\n                props: {\n                    id: 'tit',\n                    class: 'tit',\n                    children: [\n                        'title',\n                        'react'\n                    ]\n                }\n            }\n        ]\n    }\n}\nfunction render(obj,container){\n    var {type,props} = obj;\n    //文档碎片\n    //虚拟dom给一个对象，文档碎片是相当于一个变量，不是一个真实的dom结点\n    var fragment=document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item]\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n*/\n// render(obj,document.getElementById('root'));\n\n/**\n * 页面渲染过程\n * \n *请求HTML页面，浏览器HTML解析器会解析HTML文件，生成DOM树\n link引入css文件，css解析器解析css，生成css对象模型，cssOM和DOM tree结合，生成一个render tree（渲染树）；最后浏览器绘制页面\n */\n\n\n\n//页面回流（重排reflow）：DOM结构变化，内容变化，大小，位置的变化，显示的变化\n//页面重绘（repaint）：颜色的变化（背景色，字体颜色，边框颜色）\n\n//回流肯定重绘，重绘不一定回流\n\n/*1.先用变量进行dom处理，最后一次渲染\nconsole.time('time');\nvar div=document.getElementById('root');\nvar str='';\nfor(var i=0;i<1000;i++){\n    // document.getElementById('root').innerHTML +='<p>'+i+'</p>';\n    str +='<p>'+i+'</p>';\n}\ndiv.innerHTML=str;\nconsole.timeEnd('time');\n*/\n//2.对于样式的处理\nvar div=document.getElementById('root');\n\n/*\n//这些一变就会引起一次回流\ndiv.style.width = '100px';\ndiv.style.height='100px';\ndiv.style.background='red';\n*/\n\n//这样只会引起一次回流\n/*\n//这些要写在css里\n.active{\n    width:100px;\n    height:100px;\n    background:red;\n}\n*/\n// div.className='active';\n\n//3.offsetLeft,offsetWidth...等只要调动都会引起回流，要慎用\n\n/*\nconsole.log(div.offsetLeft);\nvar wid=div.offsetWidth;\nsetInterval(()=>{\n    wid +=1;\n    div.style.width=wid+'px';\n},100)\n*/\n\n//4.文档碎片（内存中的一个变量）"],"sourceRoot":""}